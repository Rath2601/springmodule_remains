package com.spring.data.dao;

import java.util.List;

import org.springframework.stereotype.Repository;

import com.spring.data.entity.Customer;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;

@Repository
public class CustomerQueryRepository {

	@PersistenceContext
	EntityManager em;

//	Query sub-types:
//		* TYPED QUERY
//		* NAMED QUERY

//	QUERY - JPQL 

	public List<Customer> getCustomerByCity(String city) {
		Query jpqlQuery = em.createQuery("SELECT c FROM Customer u WHERE u.city=:city");
		jpqlQuery.setParameter("city", city);
		return (List<Customer>) jpqlQuery.getResultList();  // we need to cast additionally
	}

//	TYPEDQUERY - JPQL (i)

	// here we don't need to cast additionally , If we use TypedQuery<OurEntity>
	// avoiding possible casting exceptions

//	public Customer getCustomerByCity(String city) {
//		TypedQuery<Customer> typedQuery = em.createQuery("SELECT c FROM Customer u WHERE u.city=:city", Customer.class);
//		typedQuery.setParameter("city", city);
//		return typedQuery.getSingleResult();

//	}

//   NAMEDQUERY - JPQL (ii)

	// Queries in entity or application.properties or orm.xml
	// nameduQueries must have unique names

//	public List<Customer> getCustomerByCity(String city) {
//		Query namedQuery = em.createNamedQuery("Customer.findByCity");
//		List<Customer> customer = (List<Customer>) namedQuery.setParameter(0, city);
//		return customer;
//
//	}
}
